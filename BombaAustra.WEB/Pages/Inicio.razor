@page "/Inicio"
@using Microsoft.AspNetCore.Authorization;
@inject IRepository repository
@inject NavigationManager Navigation

<header>
    <h3 class="text-center">Bienvenido!</h3>
</header>
<div class="text-center" style="padding:3px;">
    <img src="https://www.shareicon.net/data/512x512/2015/09/23/106239_user_512x512.png" class="card-img" style="height:150px; width:150px;"/>
</div>
<body>
    <div class="text-center">
        <button @onclick="EstadoVehiculos" class="btn btn-success boton">Lista Vehiculo</button>
        <button @onclick="Reportes" class="btn btn-success boton" >Reportes Existentes</button>
        <AuthorizeView Roles="AdministradorGeneral,AdministradorCompañia boton">
            <button @onclick="AdminUsers" class="btn btn-success boton" >Administrar usuarios</button>
            <button @onclick="AddUsers" class="btn btn-success boton" >Agregar Usuario</button>
            <button class="btn btn-success boton" >Vista Usuario</button>
            <button @onclick="Gastos" class="btn btn-success boton" >Perfil Costos</button>
        </AuthorizeView>




    </div>

    <div class="card">
        <div class="card-header">
            <i class="oi oi-be"></i> Notificaciones
        </div>
        <div class="card-body">
            @if (vehiculo != null)
            {
                // Agrega esta línea para imprimir la cantidad de vehículos antes de aplicar el filtro
                <p>Cantidad de vehículos antes del filtro: @vehiculo.Count</p>

                var fechaLimiteSuperior = DateTime.Now.AddDays(5);
                var fechaLimiteInferior = DateTime.Now;

                var vehiculosProximos = vehiculo
                .Where(v =>  v.ULTIMA_REVISION_TEC <= fechaLimiteSuperior);

                // ...


                // Agrega esta línea para imprimir la cantidad de vehículos después del filtro
                <p>Cantidad de vehículos después del filtro: @vehiculosProximos.Count()</p>
            

                if (vehiculosProximos.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Sigla</th>
                                <th>Mensaje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var vehiculoProximo in vehiculosProximos)
                            {
                                <tr>
                                    <td>@vehiculoProximo.SIGLA</td>
                                    <td>
                                        @if (vehiculoProximo.ULTIMA_REVISION_TEC >= fechaLimiteInferior && vehiculoProximo.ULTIMA_REVISION_TEC <= fechaLimiteSuperior)//esta kgada gano xd
                                        {
                                            <span>Próximo a revisión técnica</span>
                                        }
                                        else if (vehiculoProximo.ULTIMA_REVISION_TEC < fechaLimiteInferior)
                                        {
                                            <span>Atrasado en revisión técnica</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-center">
                        <p>No hay vehículos próximos o atrasados en la revisión técnica.</p>
                    </div>
                }
            }

        </div>
    </div>

</body>
@code {
    private List<TipoVehiculo>? vehiculo;

    public void EstadoVehiculos()
    {
        Navigation.NavigateTo("/ListVehi");
    }

    public void Reportes()
    {
        Navigation.NavigateTo("/Reportes");
    }

    public void AdminUsers()
    {
        Navigation.NavigateTo("/AdminUsers");
    }

    public void AddUsers()
    {
        Navigation.NavigateTo("/AgregarUsuario");
    }

    public void Gastos()
    {
        Navigation.NavigateTo("/Gastos");
    }

    public void PDF()
    {
        Navigation.NavigateTo("/generate-pdf");
    }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    //obtener lista de vehiculos
    private async Task Load()
    {
        try
        {
            var responseHttp = await repository.Get<List<TipoVehiculo>>("/api/TipoV");
            vehiculo = responseHttp.Response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar la lista de vehículo: {ex.Message}");
            // Puedes manejar el error según tus necesidades
            // Por ejemplo, mostrar un mensaje de error al usuario
            // y/o loggear el error para su posterior análisis
        }
    }


}
