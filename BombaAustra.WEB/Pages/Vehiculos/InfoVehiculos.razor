@page "/ListVehi/Info/{id}"
@inject IRepository repository
@inject NavigationManager navigate
@inject SweetAlertService swwetAlertService
@using iText.Layout.Element;
@using iText.Layout;



<table class="table table-striped">
    <thead>
        <tr class="table-bordered">
            <th>Sigla</th>
            <th>Patente</th>
            <th>Marca</th>
            <th>Revision tecnica</th>
            <th>Id_Modelo</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                @vehiculo!.SIGLA
            </td>
            <td>
                @vehiculo!.PATENTE
            </td>
            <td>
                @vehiculo!.MARCA
            </td>
            <td>
                @vehiculo!.ULTIMA_REVISION_TEC
            </td>
            <td>
                @vehiculo!.Modelo
            </td>
        </tr>
    </tbody>
</table>

<a class="btn btn-warning" href="/ListVehi/edit/@vehiculo.SIGLA">Editar</a>
<button class="btn btn-outline-success" @onclick="GeneratePdf">Generar PDF</button>
@if (pdfBytes != null)
{
    <a href="data:application/pdf;base64,@pdfBase64" download="UserPDF.pdf">Descargar PDF</a>
}

@code {

    //Editar Vehiculos
    private TipoVehiculo? vehiculo;
    private List<TipoVehiculo>? vehiculos;

    private byte[]? pdfBytes;
    private string? pdfBase64;


    [Parameter]
    public string id { get; set; } = null!;





    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        //para vehiculo
        var responseVHttp = await repository.Get<TipoVehiculo>($"/api/TipoV/{id}");
        if (responseVHttp.Error)
        {
            if (responseVHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigate.NavigateTo("/ListVehi");
                return;
            }
            var message = await responseVHttp.GetErrorMessageAsync();
            await swwetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        vehiculo = responseVHttp.Response;
        //vehiculos = vehiculo!.SIGLA!.ToList();
    }

    private void GeneratePdf()
    {
        // Aquí debes obtener el usuario de la base de datos utilizando el ID
        // usuario = ObtenerUsuarioDesdeBaseDeDatos(userId);

        if (vehiculo != null)
        {
            using (var stream = new MemoryStream())
            {
                var pdf = new PdfDocument(new PdfWriter(stream));
                var document = new Document(pdf);

                // Aquí puedes agregar los datos específicos del usuario al PDF
                document.Add(new Paragraph("Datos del vehiculo").SetFontSize(18));
                document.Add(new Paragraph($"*Sigla del vehiculo: {vehiculo.SIGLA}"));
                document.Add(new Paragraph($"*Patente: {vehiculo.PATENTE}"));
                document.Add(new Paragraph($"*Modelo: {vehiculo.Modelo}"));
                document.Add(new Paragraph($"*Marca: {vehiculo.MARCA}"));
                document.Add(new Paragraph($"*Ultima revision Tecnica: {vehiculo.ULTIMA_REVISION_TEC}"));

                document.Close();

                pdfBytes = stream.ToArray();
                pdfBase64 = Convert.ToBase64String(pdfBytes);
            }
        }
    }
}