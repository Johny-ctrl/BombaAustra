@page "/Gastos"
@inject IRepository repository
@inject NavigationManager Navigation
@inject SweetAlertService sweetAlertService

<h3>Lista de Gastos </h3>

<div class="text-center" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary mb-3" href="/Gastos/gastoAdd">Agregar Gasto</a>

    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Busqueda de gasto especifico..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>


<div>
<Paginacion CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />
</div>

<GenericList Mylist="Gasto">
    <Body>
        <div class="card">
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr class="table-bordered">
                            <th>Id Gasto</th>
                            <th>Sigla</th>
                            <th>Monto</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var gasto in Gasto!)
                        {
                            <tr>
                                <td>
                                    @gasto.ID_GASTO
                                </td>
                                <td>
                                    @gasto.SIGLA
                                </td>
                                <td>
                                    @gasto.SIGLA
                                </td>
                                <td>
                                    <button class="btn btn-danger" @onclick="(() => DeleteAsync(gasto.SIGLA))">Eliminar</button>
                                    <a class="btn btn-success">Detalles</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Body>
</GenericList>


@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    private Gastos? gastos { get; set; } = null!;

    private List<Gastos> Gasto { get; set; } = null!;

    private int currentPage = 1;
    private int totalPages;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);

    }


    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/gastos?page={page}";
            url2 = $"/api/gastos/totalPages";
        }
        else
        {
            url1 = $"/api/gastos?page={page}&filter={Filter}";
            url2 = $"/api/gastos/totalPages?filter={Filter}";
        }

        try
        {
            
            var GastosResponse = await repository.Get<List<Gastos>>(url1);
            var GastosResponse2 = await repository.Get<int>(url2);
            Gasto = GastosResponse.Response!;
            totalPages = GastosResponse2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }

    }

    private async Task DeleteAsync(string ID)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Atencion",
                Text = "¿Esta seguro que decea borrar este gasto?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "SI"
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHtpp = await repository.Delete($"/api/gastos/{ID}");
        if (responseHtpp.Error)
        {
            if (responseHtpp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHtpp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;

            }
        }
        await LoadAsync();

    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }


}
