@inject SweetAlertService sweetAlertService


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>ID Gasto:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Gasto.ID_GASTO" />
            <ValidationMessage For="@(() => Gasto.ID_GASTO)" />
        </div>

        <label>Cantidad de este año:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Gasto.AÑO_ACTUAL" />
            <ValidationMessage For="@(() => Gasto.AÑO_ACTUAL)" />
        </div>

        <label>Cantidad del año pasado:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Gasto.AÑO_PASADO" />
            <ValidationMessage For="@(() => Gasto.AÑO_PASADO)" />
        </div>

        <label>Costo Revision Tecnica:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Gasto.COSTO_REVISION_TEC" />
            <ValidationMessage For="@(() => Gasto.COSTO_REVISION_TEC)" />
        </div>

        <label>Sigla del vehiculo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Gasto.SIGLA" />
            <ValidationMessage For="@(() => Gasto.SIGLA)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>


@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Gastos Gasto { get; set; } = null!;

    public List<Gastos> gastos { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public Boolean formPostedSucces { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Gasto);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModify = editContext.IsModified();
        if (!formWasModify || formPostedSucces)
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Desea volver y perder los cambios realizados?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "SI"
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }

}
