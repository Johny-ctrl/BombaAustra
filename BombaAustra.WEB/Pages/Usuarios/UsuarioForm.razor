@inject SweetAlertService sweetAlertService


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>Rut:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Usuario.ID_RUT" />
            <ValidationMessage For="@(() => Usuario.ID_RUT)" />
        </div>

        <label>DV RUT:</label>
        <div> 
            <InputText class="form-control" @bind-Value="@Usuario.DV_RUT"/>
            <ValidationMessage For="@(() => Usuario.DV_RUT)" />
        </div>

        <label>Nombre:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Usuario.NOMBRE" />
            <ValidationMessage For="@(() => Usuario.NOMBRE)" />
        </div>

        <label>Apellido P:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Usuario.APELLIDO_P" />
            <ValidationMessage For="@(() => Usuario.APELLIDO_P)" />
        </div>

        <label>Apellido M:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Usuario.APELLIDO_M" />
            <ValidationMessage For="@(() => Usuario.APELLIDO_M)" />
        </div>

        <label>TIPO USUARIO:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Usuario.TIPO_USUARIOS"/>
            <ValidationMessage For="@(() => Usuario.TIPO_USUARIOS)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>


@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Usuario Usuario { get; set; } = null!;

    public List<Usuario> usuarios { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public Boolean formPostedSucces { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Usuario);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModify = editContext.IsModified();
        if (!formWasModify || formPostedSucces)
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title =  "Confirmacion",
            Text = "¿Desea volver y perder los cambios realizados?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "SI"
        });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }

}
